package wenjalan.generators;

import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.generator.ChunkGenerator;
import org.bukkit.util.noise.SimplexOctaveGenerator;
import wenjalan.generators.presets.GeneratorPreset;
import wenjalan.generators.presets.GrandOcean;

import java.util.Random;

public class GaeaGenerator extends ChunkGenerator {

    // the scale of the SimplexOctaveGenerator, larger values mean steeper terrain
    // public static final double SIMPLEX_OCTAVE_GENERATOR_SCALE = 0.005D;
    // public static double simplex_octave_generator_scale;

    // the number of octaves to use in the octave generator
    public static int simplex_octave_generator_octaves = 8;

    // the W Scale of the octave generator
    // currently unused?
    public static double simplex_octave_generator_w_scale = 0.0005D;

    // the X Scale of the octave generator
    public static double simplex_octave_generator_x_scale = 0.0125D;

    // the Y Scale of the octave generator
    public static double simplex_octave_generator_y_scale = 0.0125D;

    // the Z Scale of the octave generator
    public static double simplex_octave_generator_z_scale = 0.0005D;

    // the mean height of the ground
    public static double mean_height = 50.0D;

    // the noise scale
    public static double noise_scale = 15.0D;

    // the noise frequency
    public static double noise_frequency = 0.5D;

    // the noise amplitude
    public static double noise_amplitude = 0.5D;

    // the material to make the world of
    public static Material material = Material.STONE;

    // the preset we're using
    public static GeneratorPreset preset;

    // constructor
    public GaeaGenerator(GeneratorPreset preset) {
        this.preset = preset;
        // set fields
        simplex_octave_generator_w_scale = preset.getW_scale();
        simplex_octave_generator_x_scale = preset.getX_scale();
        simplex_octave_generator_y_scale = preset.getY_scale();
        simplex_octave_generator_z_scale = preset.getZ_scale();
        mean_height = preset.getMean_height();
        noise_scale = preset.getNoise_scale();
        noise_frequency = preset.getNoise_frequency();
        noise_amplitude = preset.getNoise_amplitude();
    }

    // constructor none
    public GaeaGenerator() {
        // do nothing
    }

    @Override
    public ChunkData generateChunkData(World world, Random random, int chunkX, int chunkZ, BiomeGrid biome) {
        // create chunk data
        ChunkData chunkData = createChunkData(world);

        // create a SimplexOctaveGenerator to generate some terrain
        SimplexOctaveGenerator octaveGenerator = new SimplexOctaveGenerator(new Random(world.getSeed()), simplex_octave_generator_octaves);

        // set the scale of the coordinates
        octaveGenerator.setWScale(simplex_octave_generator_w_scale);
        octaveGenerator.setXScale(simplex_octave_generator_x_scale);
        octaveGenerator.setYScale(simplex_octave_generator_y_scale);
        octaveGenerator.setZScale(simplex_octave_generator_z_scale);


        // stores the height generated by the octave generator
        int height;

        // generate some blocks
        for (int x = 0; x < 16; x++) {
            for (int z = 0; z < 16; z++) {
                // generate next height
                height = (int) (
                        octaveGenerator.noise(
                                chunkX * 16 + x,
                                chunkZ * 16 + z,
                                noise_frequency,
                                noise_amplitude) * noise_scale + mean_height);

                // set blocks
                // if this is a Grand Ocean, fill some water
                if (preset instanceof GrandOcean) {
                    // stone
                    for (int y = height; y > 0; y--) {
                        chunkData.setBlock(x, y, z, Material.STONE);
                    }
                    // sand (top 4 blocks)
                    for (int y = height; y > height - 4; y--) {
                        chunkData.setBlock(x, y, z, Material.SAND);
                    }
                    // fill water to the ocean line above the ground
                    for (int y = height + 1; y <= GrandOcean.ocean_level; y++) {
                        chunkData.setBlock(x, y, z, Material.WATER);
                    }
                }
                else {
                    // stone
                    for (int y = height; y >= 0; y--) {
                        chunkData.setBlock(x, y, z, material);
                    }
                }


                // bedrock
                chunkData.setBlock(x, 0, z, Material.BEDROCK);
            }
        }

        // return the data
        return chunkData;
    }

}
